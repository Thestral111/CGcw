Texture2D tex : register(t0);       // Diffuse texture
Texture2D normalMap : register(t1); // Normal map
SamplerState samplerLinear : register(s0);

struct PS_INPUT {
    float4 Pos : SV_POSITION;
    float2 TexCoords : TEXCOORD;
    float3 TangentToLight : TEXCOORD1;
    float3 TangentToView : TEXCOORD2;
};

float4 PS(PS_INPUT input) : SV_Target0 {
    // Sample the diffuse texture
    float4 baseColor = tex.Sample(samplerLinear, input.TexCoords);

    // Sample the normal map
    float3 normalMapValue = normalMap.Sample(samplerLinear, input.TexCoords).rgb;
    normalMapValue = normalMapValue * 2.0 - 1.0; // Convert from [0,1] to [-1,1]

    // Normalize inputs
    float3 norm = normalize(normalMapValue);
    float3 lightDir = normalize(input.TangentToLight);
    float3 viewDir = normalize(input.TangentToView);

    // Ambient
    float3 ambient = 0.1;

    // Diffuse
    float diffuse = max(dot(norm, lightDir), 0.0);

    // Specular
    float3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16);

    // Combine lighting
    float3 lighting = ambient + diffuse + spec;

    // Apply lighting to the base color
    return float4(baseColor.rgb * lighting, baseColor.a);
}