cbuffer staticMeshBuffer {
    float4x4 VP;         // View-Projection Matrix
    float4x4 world;      // World Matrix
    float3 lightPos;     // Light Position
};

struct VS_INPUT {
    float3 Pos : POS;
    float3 Normal : NORMAL;
    float3 Tangent : TANGENT;
    float2 TexCoords : TEXCOORD;
};

struct PS_INPUT {
    float4 Pos : SV_POSITION;
    float2 TexCoords : TEXCOORD;
    float3 TangentToLight : TEXCOORD1; // Light direction in tangent space
    float3 TangentToView : TEXCOORD2;  // View direction in tangent space
};

PS_INPUT VS(VS_INPUT input) {
    PS_INPUT output;

    // Transform position
    float4 worldPos = mul(float4(input.Pos, 1.0), world);
    output.Pos = mul(worldPos, VP);

    // Pass texture coordinates
    output.TexCoords = input.TexCoords;

    // Tangent space basis
    float3 T = normalize(mul(input.Tangent, (float3x3)world));
    float3 N = normalize(mul(input.Normal, (float3x3)world));
    float3 B = normalize(cross(N, T)); // Bitangent

    // Light direction in world space
    float3 lightDir = normalize(lightPos - worldPos.xyz);

    // View direction in world space (assuming camera at origin)
    float3 viewDir = normalize(-worldPos.xyz);

    // Transform directions into tangent space
    output.TangentToLight.x = dot(lightDir, T);
    output.TangentToLight.y = dot(lightDir, B);
    output.TangentToLight.z = dot(lightDir, N);

    output.TangentToView.x = dot(viewDir, T);
    output.TangentToView.y = dot(viewDir, B);
    output.TangentToView.z = dot(viewDir, N);

    return output;
}