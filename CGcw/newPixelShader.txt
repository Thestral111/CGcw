Texture2D tex : register(t0);
Texture2D normalMap : register(t1); // Normal map
SamplerState samplerLinear : register(s0);
#define PI 3.14159265359

cbuffer staticMeshBuffer {
    float4x4 VP;         // View-Projection Matrix
    float4x4 W;      // World Matrix
    float3 lightPos;     // Light Position
    float3 lightColour;
};

struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float3 Normal : NORMAL;
    float3 Tangent : TANGENT;
    float2 TexCoords : TEXCOORD;
};

float4 PS(PS_INPUT input) : SV_Target0
{

    float3 normal = normalize(input.Normal);
    float3 tangent = normalize(input.Tangent);
    float3 binormal = normalize(cross(normal, tangent));
    float3x3 TBN = float3x3(tangent, binormal, normal);
    float3 mapNormal = normalMap.Sample(samplerLinear, input.TexCoords).xyz;
    mapNormal = mapNormal * 2.0 - 1.0;
    float3 localLightDir = mul(normalize(-lightPos), transpose(TBN));
    
    float3 diffuse = lightColour * max(dot(mapNormal, localLightDir), 0.0);
    //add ambient light
    diffuse = diffuse + float3(0.4, 0.4, 0.4);

    float4 colour = tex.Sample(samplerLinear, input.TexCoords);
    // combine basecolor and diffuse
    diffuse = colour.rgb *diffuse;
    if (colour.a < 0.5)
    {
        discard;
    }
    return float4(diffuse, colour.a);
}
